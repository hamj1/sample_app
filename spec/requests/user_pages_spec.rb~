require 'spec_helper'

describe "User pages" do

   subject { page }

   describe "profile page" do
     let(:user) { FactoryGirl.create(:user) }
     before { visit user_path(user) }

     it { should have_selector('h1', :text => user.name) }
     it { should have_selector('title', :text => user.name) }
   end

   describe "signup page" do
     before { visit signup_path }

     let(:submit) { "Create my account" }

     describe "with invalid information" do
        it "should not create a user" do
           expect { click_button submit }.not_to change(User, :count)
        end

        describe "after submission" do
          before { click_button submit }

           # it { should have_selector('title', :text => 'Sign up') }
           # it { should have_content('error') }
           # it { should have_content('Password digest can\'t be blank') }
           # it { should have_content('Name can\'t be blank') }
           # it { should have_content('Email can\'t be blank') }
           # it { should have_content('Email is invalid') }
           # it { should have_content('Password can\'t be blank') }
           # it { should have_content('Password is too short (minimum is 6 characters)') }
           # it { should have_content('Password confirmation can\'t be blank') }

           describe User do

  before(:each) do
  @attr = {
  :name => "Example User",
  :email => "user@example.com",
  :password => "foobar",
  :password_confirmation => "foobar"
    }
  end

  it "should create a new instance given a valid attribute" do
    User.create!(@attr)
  end

  it "should require a name" do
    no_name_user = User.new(@attr.merge(:name => ""))
    no_name_user.should_not be_valid
  end

  it "should require an email address" do
    no_email_user = User.new(@attr.merge(:email => ""))
    no_email_user.should_not be_valid
  end

  it "should reject names that are too long" do
    long_name = "a" * 51
    long_name_user = User.new(@attr.merge(:name => long_name))
    long_name_user.should_not be_valid
  end

  it "should accept valid email addresses" do
    addresses = %w[user@foo.com THE_USER@foo.bar.org first.last@foo.jp]
    addresses.each do |address|
      valid_email_user = User.new(@attr.merge(:email => address))
      valid_email_user.should be_valid
    end
  end

  it "should reject invalid email addresses" do
    addresses = %w[user@foo,com user_at_foo.org example.user@foo.]
    addresses.each do |address|
      invalid_email_user = User.new(@attr.merge(:email => address))
      invalid_email_user.should_not be_valid
    end
   end

  it "should reject duplicate email addresses" do
    User.create!(@attr)
    user_with_duplicate_email = User.new(@attr)
    user_with_duplicate_email.should_not be_valid
  end
  end


           
        end

     end

     describe "with valid information" do
       before do
          fill_in "Name", :with => "Example User"
          fill_in "Email", :with => "user@example.com"
          fill_in "Password", :with => "foobar"
          fill_in "Confirmation", :with => "foobar"
       end

       it "should create a user" do
         expect { click_button submit }.to change(User, :count).by(1)
       end

       describe "after saving the user" do
         before { click_button submit }

         let(:user) { User.find_by_email('user@example.com') }
           it { should have_selector('title', :text => user.name) }
           it { should have_selector('div.alert.alert-success', :text => 'Welcome to the Sample App') }
       end
     end
   end
end
